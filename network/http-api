# Resource?

API URI설계에서 중요한 것은 리소스의 식별입니다. 리소스라고 하는것은 단순히 조회하고 수정 등록하는것을 일컫는 말이 아니라 만약 회원의 리소스를 조회했을때의 회워자체가 리소스가 됩니다.


> 식별 방식

- 회원 목록 조회
/users

- 회원 개별 조회

/users/{id}

- 회원 등록

/users/{id}

- 회원 수정

/users/{id}

- 회원 삭제
  
/users/{id}


URI 리소스만 식별하고 리소스와 리소스를 대상으로 하는 행위를 분리하여 URI 설계를 진행합니다.

리소스: 회원(명사)
행위: 목록조회, 개별조회, 등록, 수정, 삭제

# HTTP Method

> GET

리소스를 조회한다.

> POST

요청 데이터처리, 주로 등록에 사용

> PUT

리소스를 대체하고 리소스가 없다면 생성시킵니다.

> PATCH

리소스를 부분 변경합니다.

> DELETE

리소스를 삭제합니다.


# HTTP Method(기타)

HEAD: GET과 유사하지만 메시지 부분을 제외하고 상태줄과 헤더만 반환.

OPTIONS: 대상 리소스에 대한 통신 가능 옵션을 설명(CORS)

CONNECT: 대상자원으로 식별되는 서버에 대한 터널을 설정

TRACE: 대상 리소스에 대한 경로에 따라 루프백 테스트를 수행

## GET Method
- 리소스를 조회합니다.
- 서버에 전달하고 싶은 데이터는 쿼리 파라미터(쿼리스트링)을 통해서 전달됩니다.
- 메시지 바디를 사용하여 데이터를 전송할 수 있지만 지원하지 않는곳이 많아 권장하지않는 방식입니다. 최근에는 허용이 되었지만 실무에서는 잘 사용되지 않는 방식입니다.

## POST Method

POST메서드는 대상리소스가 리소스의 고유 한 의미 체계에 따라 요청에 포함된 표현을 처리하도록 하는 요청입니다.

- 요청 데이터를 처리합니다.
- 메시지 바디를 통하여 서버로 요청 데이터를 전달합니다.
- 서버는 요청 데이터를 처리하고 메시지 바디를 통해서 들어온 데이터를 처리하는 모든 기능을 수행합니다.
- 주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용됩니다.

> POST가 사용되는 기능

- HTML양식에 입력된 필드와 같은 데이터 블록을 데이터 처리 프로세스에 제공합니다.
(회원가입,주문)

- 게시판, 뉴스 그룹, 메일링 리스트, 블로그 또는 유사한 기사 그릅에 메시지를 게시합니다.
(글쓰기, 댓글달기)

- 서버가 아직 식별하지 않은 새 리소스를 생성합니다.
(신규주문)

- 기존 자원에 데이터 추가
(문서에 내용 추가하기)

즉, 이 리소스 URI에 POST요청이 오면 요청 데이터를 어떻게 처리할지 리소스마다 따로 정해야합니다.

> POST 정리

- 새 리소스를 생성합니다.(등록)
서버가 아직 식별하지 않은 새 리소스를 생성합니다.

- 요청 데이터 처리할때 사용됩니다.
데이터 생성하거나 변경을 넘어서 프로세스를 변경해야할 경우 POST를 사용합니다.
결제 -> 주문 -> 완료와 같은 프로세스의 상태가 변경되는 경우에 사용합니다.
POST의 결과로 새로운 리소스가 생성되지 않는 경우도 있습니다. 컨트롤 URI라고 하며 동사가 포함된것들로 컨트롤되어집니다.

- 다른 메서드로 처리가 애매한 경우에 사용됩니다.
JSON 데이터 형식으로 데이터를 넘길때 GET 메서드를 사용하기 어려운 경우 POST를 사용합니다.

## PUT Method

- 리소스를 대체합니다. 대체한다는 의미는 리소스가 있으면 대체하고 리소스가 없으면 리소스를 생성합니다. 즉, 리소스를 덮어버리게 됩니다.

- 클라이언트가 리소스를 식별합니다. 클라이언트가 리소스 위치를 알고 URI를 지정합니다.
(POST와 차이점)

## PATCH Method

- 리소스를 부분만 교체합니다.

## DELETE Method

- 리소스를 제거합니다.

# HTTP Method Properties

- 안전(Safe Methods)
GET같은 경우는 안전하며 POST,PUT과 같은 변경이 많은 것들은 안전하지 않습니다. 호출해도 리소스를 변경하지 않습니다. 안전은 리소스만 고려합니다.

- 멱등(Idempotent Methods)
여러번 호출해도 결과는 같아야합니다. PUT을 호출하여 서버응답 호출을 통하여 재시도 할지 안할지를 확인할 수 있습니다. 즉, 자동 복구 매커니즘에서 많이 활용됩니다.

만약, 재요청 중간에 다른 곳에서 리소스를 변경하게 된다면 멱등성은 외부 요인으로 중간에 리소스가 변경되는것 까지 고려하지 않습니다.

> 멱등메서드
GET:여러번 조회하든 결과가 같습니다.
PUT: 결과를 대체하여 여러번 요청해도 최종 결과는 같습니다.
DELETE: 결과를 삭제합니다. 같은 요청을 여러번 해도 삭제된 결과는 같습니다.
POST: 멱등성을 가진 메서드가 아닙니다. 두번 호출시 주문 중복이나 결제 중복이 발생할 수 있습니다.

- 캐시가능(Cacheable Methods)
응답 결과 리소스를 캐시해서 사용할 수 있습니다. (GET, HEAD, POST, PATCH)
GET,HEAD정도만 캐시로 사용하고 POST, PATCH같은 경우는 본문 내용까지 캐싱을 진행해야하기 때문에 주로 GET,HEAD를 사용합니다.